class Node<T> {
  T? nodeValue;
  Node<T>? next;

  // Constructor tanpa nilai awal
  Node() {
    nodeValue = null;
    next = null;
  }

  // Constructor dengan nilai awal
  Node.withValue(T item) {
    nodeValue = item;
    next = null;
  }
}

class SingleLinkedList<T> {
  Node<T>? head;

  // Tambah node di awal
  void insertFirst(T data) {
    Node<T> newNode = Node.withValue(data);
    newNode.next = head;
    head = newNode;
  }

  // Cetak isi linked list
  void printList() {
    Node<T>? current = head;
    while (current != null) {
      print(current.nodeValue);
      current = current.next;
    }
  }

  // Cari node berdasarkan nilai
  Node<T>? findNode(T data) {
    Node<T>? current = head;
    while (current != null) {
      if (current.nodeValue == data) {
        return current;
      }
      current = current.next;
    }
    return null;
  }
}

void main() {
  var list = SingleLinkedList<int>();

  // Menambahkan data ke dalam linked list
  list.insertFirst(10);
  list.insertFirst(20);
  list.insertFirst(30);

  // Menampilkan isi list
  print('Isi Linked List:');
  list.printList();

  // Mencari node tertentu
  var result = list.findNode(20);
  if (result != null) {
    print('Node ditemukan: ${result.nodeValue}');
  } else {
    print('Node tidak ditemukan');
  }
}
